export class {{name}}RedashData implements RemoteDataSource<{{name}}> {

private _tableName = "{{name}}":string



async update(): Promise<{{name}}[]> {
    const response = await fetch(ProjectRedashData.URL).then(
      async (res) => (await res.json()) as RedashQueryResult
    );
    return response.query_result.data.rows.map((row: Project) =>
      this.fromData(row)
    );
  }

const update = (
    base: any,
    {{#attrs}}
        {{name}}: {{type}},
        ) => {
  return new Promise(resolve => {
    const content = {
      id,
      fields: {
          {{#attrs}}
            {{name}}: {{name}},
          {{/attrs}}
      }
    }

    base(tableName).update([content], function (err: any) {
      if (err) {
        console.error(err);
        return;
      }
      resolve(true)
    });
  })
}

const create = (base: any, 
{{$attrs}}
  {{name}}: {{type}},
{{/attrs}
}) => {
  return new Promise(resolve => {
    const fields = {
      value,
      project: [projectId],
      paymentGatewayCompany: [pgId],
      unpaid,
    }

    base(tableName).create([{ fields }], function (err: any) {
      if (err) {
        console.error(err);
        return;
      }
      resolve(true)
    });
  })
}
}

